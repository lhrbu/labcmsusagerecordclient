[{"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\index.tsx":"1","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\reportWebVitals.ts":"2","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\ProjectsRepository.ts":"3","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\EquipmentHourlyRatesRepository.ts":"4","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\App.tsx":"5","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\ProjectsWebAPI.ts":"6","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\EquipmentHourlyRatesWebAPI.ts":"7","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\AddRecord.tsx":"8","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Home.tsx":"9","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\DynamicQuery.tsx":"10","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Records.tsx":"11","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Admin.tsx":"12","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\AddMachineDownRecord.tsx":"13","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\MachineDownRecords.tsx":"14","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\UsageRecordsWebAPI.ts":"15","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\DynamicQueryWebAPI.ts":"16","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\UsageRecordLocalCacheService.ts":"17","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\TableGenerator.ts":"18","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\TimeStampConverter.ts":"19","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\UsageRecord.ts":"20","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\EquipmentHourlyRate.ts":"21","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\Project.ts":"22","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\MachineDownRecordsWebAPI.ts":"23","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Components\\UsageRecordEditor.tsx":"24","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\MachineDownRecord.ts":"25","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\UsersRepository.ts":"26","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\UsersWebAPI.ts":"27"},{"size":1200,"mtime":1612321983925,"results":"28","hashOfConfig":"29"},{"size":440,"mtime":1609816263162,"results":"30","hashOfConfig":"29"},{"size":1065,"mtime":1614904662349,"results":"31","hashOfConfig":"29"},{"size":817,"mtime":1609816263147,"results":"32","hashOfConfig":"29"},{"size":3128,"mtime":1614905991275,"results":"33","hashOfConfig":"29"},{"size":732,"mtime":1612317308140,"results":"34","hashOfConfig":"29"},{"size":859,"mtime":1612317308133,"results":"35","hashOfConfig":"29"},{"size":1119,"mtime":1610420644764,"results":"36","hashOfConfig":"29"},{"size":952,"mtime":1609816263143,"results":"37","hashOfConfig":"29"},{"size":3427,"mtime":1610441723736,"results":"38","hashOfConfig":"29"},{"size":7561,"mtime":1612317308125,"results":"39","hashOfConfig":"29"},{"size":9676,"mtime":1612317308120,"results":"40","hashOfConfig":"29"},{"size":5324,"mtime":1612326311239,"results":"41","hashOfConfig":"29"},{"size":6906,"mtime":1612321039494,"results":"42","hashOfConfig":"29"},{"size":777,"mtime":1609816263159,"results":"43","hashOfConfig":"29"},{"size":392,"mtime":1610441482529,"results":"44","hashOfConfig":"29"},{"size":800,"mtime":1609816263153,"results":"45","hashOfConfig":"29"},{"size":611,"mtime":1610441212437,"results":"46","hashOfConfig":"29"},{"size":589,"mtime":1609816263152,"results":"47","hashOfConfig":"29"},{"size":881,"mtime":1609816263137,"results":"48","hashOfConfig":"29"},{"size":234,"mtime":1609816263135,"results":"49","hashOfConfig":"29"},{"size":157,"mtime":1610420276099,"results":"50","hashOfConfig":"29"},{"size":562,"mtime":1612317308137,"results":"51","hashOfConfig":"29"},{"size":8961,"mtime":1614905858837,"results":"52","hashOfConfig":"29"},{"size":567,"mtime":1612321494265,"results":"53","hashOfConfig":"29"},{"size":699,"mtime":1612325810535,"results":"54","hashOfConfig":"29"},{"size":278,"mtime":1612325501984,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1202gmo",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\index.tsx",[],["122","123"],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\reportWebVitals.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\ProjectsRepository.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\EquipmentHourlyRatesRepository.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\App.tsx",["124","125","126","127","128","129"],"import React, { useRef, useState } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\r\nimport\r\n  {\r\n    HomeFilled, PlusCircleFilled, ProfileFilled,\r\n    LoginOutlined, CodeFilled, SaveFilled, DatabaseFilled, BarChartOutlined\r\n  } from '@ant-design/icons';\r\nimport './App.css';\r\nimport Home from './Pages/Home';\r\nimport AddRecord from './Pages/AddRecord';\r\nimport Records from './Pages/Records';\r\nimport Admin from './Pages/Admin';\r\nimport DynamicQuery from './Pages/DynamicQuery';\r\nimport AddMachineDownRecord from './Pages/AddMachineDownRecord';\r\nimport MachineDownRecords from './Pages/MachineDownRecords';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n\r\nexport default function App()\r\n{\r\n\r\n  return (\r\n    <Layout className=\"layout\">\r\n      <BrowserRouter>\r\n        <Header>\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[window.location.pathname]} style={{ fontSize: '16px' }}>\r\n            <Menu.Item key=\"/\"><Link to='/'><HomeFilled />Home</Link></Menu.Item>\r\n            <Menu.Item key=\"/AddRecord\"><Link to='/AddRecord'><PlusCircleFilled />Add Record</Link></Menu.Item>\r\n            <Menu.Item key=\"/Records\"><Link to='/Records'><ProfileFilled />Records</Link></Menu.Item>\r\n            <Menu.Item key=\"/api/ExcelExport\"><a href='/api/ExcelExport' target=\"_blank\"><SaveFilled />Excel</a></Menu.Item>\r\n            <Menu.Item key='/AddMachineDownRecord'><Link to='/AddMachineDownRecord'><PlusCircleFilled />Add Machine Down</Link></Menu.Item>\r\n            <Menu.Item key='/MachineDownRecords'><Link to='/MachineDownRecords'><ProfileFilled />Machine Down Records</Link></Menu.Item>\r\n            <Menu.Item key=\"/DynamicQuery\"><Link to='/DynamicQuery'><CodeFilled />Query</Link></Menu.Item>\r\n            {/* <Menu.Item key=\"/Admin\" ><Link id='AdminMenuDom' to=\"/Admin\"><DatabaseFilled />Admin</Link></Menu.Item> */}\r\n          </Menu>\r\n        </Header>\r\n        <Content style={{ padding: '0 28px' }}>\r\n          <div className=\"site-layout-content\">\r\n            <Switch>\r\n              <Route exact path='/AddRecord'>\r\n                <div style={{ padding: '2rem 10rem 0rem 10rem' }}>\r\n                  <AddRecord />\r\n                </div>\r\n              </Route>\r\n              <Route exact path='/Records'>\r\n                <Records />\r\n              </Route>\r\n              <Route exact path='/AddMachineDownRecord'>\r\n                <AddMachineDownRecord />\r\n              </Route>\r\n              <Route exact path='/MachineDownRecords'>\r\n                <MachineDownRecords />\r\n              </Route>\r\n              <Route exact path='/DynamicQuery'>\r\n                <DynamicQuery />\r\n              </Route>\r\n              {/* <Route exact path='/Admin'>\r\n                <Admin />\r\n              </Route> */}\r\n              <Route path='/'>\r\n                <Home />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>LabCMS.EquipmentDomain ©2020 Created by Raccoon Li</Footer>\r\n      </BrowserRouter>\r\n    </Layout>\r\n  );\r\n}\r\n","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\ProjectsWebAPI.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\EquipmentHourlyRatesWebAPI.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\AddRecord.tsx",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Home.tsx",["130"],"import React, { useEffect, useState } from 'react';\r\nimport {Statistic,Result, Typography, Card} from 'antd';\r\nimport moment from \"moment\";\r\nimport { RedditOutlined } from '@ant-design/icons';\r\n\r\nconst { Text,Paragraph } = Typography;\r\n\r\nexport default function Home()\r\n{\r\n    const [dateTime,setDateTimeNow] = useState<string>(moment().format(\"yyyy/MM/DD HH:mm:ss\"));\r\n\r\n    useEffect(()=>{\r\n        const id = setInterval(()=>{\r\n            setDateTimeNow(moment().format(\"yyyy/MM/DD HH:mm:ss\"));\r\n        },1000);\r\n        return ()=>clearInterval(id);\r\n    },[]);\r\n\r\n    return (\r\n    <Result icon={<RedditOutlined />}\r\n        title={<Text strong style={{fontSize:'2.4rem'}}>Welcome</Text>}\r\n        subTitle='Equipment Usage Record System' \r\n        extra={\r\n            <Card>\r\n                <Statistic title='Date Time' value={dateTime} valueStyle ={{fontSize:'20px'}}/>\r\n            </Card>\r\n            \r\n            }>\r\n\r\n    </Result>)\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\DynamicQuery.tsx",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Records.tsx",["131"],"import React,{Fragment, useEffect, useState} from 'react';\r\nimport { Table,Modal, Button} from 'antd';\r\nimport UsageRecord from '../Models/UsageRecord';\r\nimport UsageRecordsWebAPI from '../WebAPIs/UsageRecordsWebAPI';\r\nimport UsageRecordEditor from '../Components/UsageRecordEditor';\r\nimport UsageRecordLocalCacheService from '../Services/UsageRecordLocalCacheService';\r\nimport Moment from 'moment';\r\nimport './HeaderBar.css';\r\nimport TimeStampStringConverter from '../Services/TimeStampConverter';\r\nimport ProjectsRepository from '../Repositories/ProjectsRepository';\r\n\r\nconst distinct = require('distinct');\r\nconst {Column} = Table;\r\nconst _pageSize = 12;\r\n\r\nexport default function Records()\r\n{\r\n    const _usageRecordsWebAPI = new UsageRecordsWebAPI();\r\n    const _timeStampStringConverter = new TimeStampStringConverter();\r\n\r\n    const [tableLoading,setTableLoading]=useState<boolean>(true);\r\n    const [currentPageIndex,setCurrentPageIndex]=useState<number>(1);\r\n    const [usageRecords,setUsageRecords] = useState<UsageRecord[]>([]);\r\n\r\n    const [inEditing,setInEditing]=useState<boolean>(false);\r\n    const [selectedRecord,setSelectedRecord]=useState<UsageRecord | null>(null);\r\n\r\n    useEffect(()=>{\r\n        FetchUsageRecords();\r\n    },[]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"HeaderBar\">HJL-NL-TI-V Test equipment usage record {Moment().year()}</div>\r\n            <Table dataSource={usageRecords}\r\n                loading={tableLoading}\r\n                rowKey=\"Id\"\r\n                pagination={{position:[\"bottomCenter\"],defaultPageSize:_pageSize,current:currentPageIndex,\r\n                            onChange:index=>setCurrentPageIndex(index)}}\r\n                rowSelection={{\r\n                    type:\"radio\",\r\n                    hideSelectAll:true,\r\n                    onSelect:setSelectedRecord\r\n                }}\r\n                bordered \r\n                size='small'\r\n            >\r\n                <Column title=\"User\" dataIndex=\"User\"\r\n                    filters={GenerateFilterOptions(usageRecords.filter(item=>item.User?true:false).map(item=>item.User!))}\r\n                    onFilter={(value, record) => (record as UsageRecord).User === value }\r\n                    />\r\n                <Column title=\"Test No\" dataIndex=\"TestNo\"\r\n                    filters={GenerateFilterOptions(usageRecords.filter(item=>item.TestNo?true:false).map(item=>item.TestNo!))}\r\n                    onFilter={(value, record) => (record as UsageRecord).TestNo === value }\r\n                    />\r\n                <Column title=\"Equipment No\" dataIndex=\"EquipmentNo\"\r\n                    filters={GenerateFilterOptions(usageRecords.filter(item=>item.EquipmentNo?true:false).map(item=>item.EquipmentNo!))}\r\n                    onFilter={(value, record) => (record as UsageRecord).EquipmentNo === value }\r\n                    />\r\n                <Column title=\"Project Name\" \r\n                    render={(_,usageRecord)=>usageRecord?ProjectsRepository.Instance.FindNameByProjectNo(\r\n                        (usageRecord as UsageRecord)!.ProjectNo!):null}\r\n                    filters = {GenerateFilterOptions(usageRecords.filter(item=>item.ProjectNo?true:false).map(item=>\r\n                        ProjectsRepository.Instance.FindNameByProjectNo(item.ProjectNo!)!))}\r\n                    onFilter={(value,record)=>(record as UsageRecord).ProjectNo===ProjectsRepository.Instance.FindProjectNoByName(value as string)}\r\n                        />\r\n                <Column title=\"Test Type\" dataIndex=\"TestType\"\r\n                    filters={GenerateFilterOptions(usageRecords.filter(item=>item.TestType?true:false).map(item=>item.TestType!))}\r\n                    onFilter={(value, record) => (record as UsageRecord).TestType === value }\r\n                    />\r\n                <Column title=\"Start Time\" dataIndex=\"StartTime\" \r\n                    render={timeStampValue=>timeStampValue?_timeStampStringConverter.FromUnixTimeSeconds(timeStampValue as number):null}/>\r\n                <Column title=\"End Time\" dataIndex=\"EndTime\" \r\n                    render={timeStampValue=>timeStampValue?_timeStampStringConverter.FromUnixTimeSeconds(timeStampValue as number):null}/>\r\n                <Column title=\"Duration\" \r\n                    render={(_,usageRecord)=>usageRecord?GetAndRenderDuration(usageRecord as UsageRecord):null}/>\r\n            </Table>\r\n\r\n            <Modal\r\n                getContainer={false}\r\n                visible={inEditing}\r\n                title=\"Edit Usage Record\"\r\n                onCancel={()=>setInEditing(false)}\r\n                footer={[\r\n                    <Button key=\"close\" type=\"default\" danger\r\n                        onClick={()=>setInEditing(false)}\r\n                        >Close</Button>\r\n                ]}\r\n            >\r\n                 <UsageRecordEditor \r\n                    Record={selectedRecord?selectedRecord:undefined}\r\n                    OnSubmit={OnEditorSubmitEditedRecordAsync}\r\n                    />\r\n            </Modal>\r\n\r\n            <Button type='primary' disabled={selectedRecord?false:true}\r\n                onClick={()=>{setInEditing(true)}}>\r\n                    Edit</Button>\r\n            <Button  type='primary' disabled={selectedRecord?false:true}\r\n                onClick={()=>{if(selectedRecord){\r\n                    UsageRecordLocalCacheService.Instance.SetCache(selectedRecord);\r\n                    window.alert(`Usage record of ${selectedRecord.TestNo} is copied`);\r\n                }}}\r\n                style={{marginLeft:'4px',backgroundColor:selectedRecord?'green':undefined}}>\r\n                    Copy</Button>\r\n             <Button type=\"primary\" danger disabled={selectedRecord?false:true}\r\n                onClick={OnDeleteConfirmAsync}\r\n                style={{marginLeft:'4px'}}>\r\n                Delele\r\n            </Button>\r\n        </Fragment>\r\n    )\r\n\r\n\r\n    async function FetchUsageRecords()\r\n    {\r\n        const usageRecords = await _usageRecordsWebAPI.GetAsync();\r\n        setUsageRecords([...usageRecords]);\r\n        setCurrentPageIndex(GetPageCount(usageRecords.length,_pageSize));\r\n        setTableLoading(false);\r\n    }\r\n\r\n    async function OnEditorSubmitEditedRecordAsync(editedRecord:UsageRecord)\r\n    {\r\n        setInEditing(false);\r\n        editedRecord.Id = selectedRecord!.Id;\r\n        await _usageRecordsWebAPI.PutAsync(editedRecord);\r\n        const index = usageRecords.findIndex(record=>record.Id===selectedRecord!.Id) ;\r\n        usageRecords[index]=editedRecord;\r\n        setUsageRecords([...usageRecords]);\r\n        setSelectedRecord(null);\r\n    }\r\n\r\n    async function OnDeleteConfirmAsync() {\r\n        if(selectedRecord && selectedRecord.Id){\r\n            if( window.confirm(`Sure to delete ${selectedRecord.TestNo} ?`) )\r\n            {\r\n                await _usageRecordsWebAPI.DeleteByIdAsync(selectedRecord.Id);\r\n                setUsageRecords([...usageRecords.filter(item=>item.Id!==selectedRecord.Id)]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction GetPageCount(num: number, pageSize: number)\r\n{\r\n    return num % pageSize === 0 ? Math.floor(num / pageSize) : Math.ceil(num / pageSize);\r\n}\r\n\r\nfunction GetAndRenderDuration(usageRecord: UsageRecord)\r\n{\r\n    const duration = UsageRecord.GetDuration(usageRecord);\r\n    return Number.isInteger(duration) ? duration : duration.toFixed(2);\r\n}\r\n\r\nfunction GenerateFilterOptions<TOption>(optionValues: TOption[])\r\n{\r\n    return (distinct(optionValues) as TOption[]).sort().map(optionValue => { return { text: optionValue, value: optionValue } });\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\Admin.tsx",["132","133","134"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Button, Form, Input, Typography, Collapse } from 'antd';\r\nimport Project from '../Models/Project';\r\nimport ProjectsWebAPI from '../WebAPIs/ProjectsWebAPI';\r\nimport EquipmentHourlysRatesWebAPI from '../WebAPIs/EquipmentHourlyRatesWebAPI';\r\nimport EquipmentHourlyRate from '../Models/EquipmentHourlyRate';\r\nimport EquipmentHourlyRatesRepository from '../Repositories/EquipmentHourlyRatesRepository';\r\nimport ProjectsRepository from '../Repositories/ProjectsRepository';\r\n\r\nconst { Panel } = Collapse;\r\n\r\nexport default function Admin()\r\n{\r\n    const [inProjectSubmit,setInProjectSubmit] = useState<boolean>(false);\r\n    const [inProjectDelete,setInProjectDelete] = useState<boolean>(false);\r\n    const [inEquipmentHourlyRateSubmit,setInEquipmentHourlyRateSubmit]= useState<boolean>(false);\r\n    const [inEquipmentHourlyRateDelete,setInEquipmentHourlyRateDelete]= useState<boolean>(false);\r\n    return (\r\n    <Fragment>\r\n        <Collapse accordion>\r\n                <Panel header=\"Add or update Project\" key=\"AddProject\">\r\n                    <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 12 }}\r\n                        onFinish={ProjectSubmitAsync}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Project No.\"\r\n                            name=\"No\"\r\n                            rules={[{ required: true, message: 'Please input project No!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Project Name\"\r\n                            name=\"Name\"\r\n                            rules={[{ required: true, message: 'Please input project name!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Project Name in Fin.\"\r\n                            name=\"NameInFIN\"\r\n                            rules={[{ required: true, message: 'Please input project name in FIN.!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            wrapperCol={{ offset: 8, span: 16 }}\r\n                        >\r\n                            <Button type=\"primary\" htmlType=\"submit\"\r\n                                loading={inProjectSubmit}>Submit</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Panel>\r\n\r\n                <Panel header=\"Delete Project\" key=\"DeleteProject\">\r\n                    <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 12 }}\r\n                        onFinish={ProjectDeleteAsync}>\r\n                            <Form.Item\r\n                            label=\"Project Name.\"\r\n                            name=\"Name\"\r\n                            rules={[{ required: true, message: 'Please input project Name!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            wrapperCol={{ offset: 8, span: 16 }}\r\n                        >\r\n                            <Button type=\"primary\" danger htmlType=\"submit\"\r\n                                loading={inProjectDelete}>Delete</Button>\r\n                        </Form.Item>\r\n\r\n                   </Form>\r\n                </Panel>\r\n\r\n                <Panel header=\"Add or update Equipment Hourly Rate\" key=\"AddEquipmentHourlyRate\">\r\n                <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 12 }}\r\n                        onFinish={OnEquipmentHourlyRateSubmitAsync}\r\n                    >\r\n                        <Form.Item\r\n                            label=\"Equipment No\"\r\n                            name=\"EquipmentNo\"\r\n                            rules={[{ required: true, message: 'Please input equipment no!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"Equipment Name\"\r\n                            name=\"EquipmentName\"\r\n                            rules={[{ required: true, message: 'Please input equipment name!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Machine Category\"\r\n                            name=\"MachineCategory\"\r\n                            rules={[{ required: true, message: 'Please input machine category!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Hourly Rate\"\r\n                            name=\"HourlyRate\"\r\n                            rules={[{ required: true, message: 'Please input hourly rate!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            wrapperCol={{ offset: 8, span: 16 }}\r\n                        >\r\n                            <Button type=\"primary\" htmlType=\"submit\"\r\n                                loading={inEquipmentHourlyRateSubmit}>Submit</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Panel>\r\n\r\n                <Panel header=\"Delete Equipment Hourly Rate\" key=\"DeleteEquipmentHourlyRate\">\r\n                <Form\r\n                        labelCol={{ span: 8 }}\r\n                        wrapperCol={{ span: 12 }}\r\n                        onFinish={OnEquipmentHourlyRateDeleteAsync}>\r\n                            <Form.Item\r\n                            label=\"Equipment No.\"\r\n                            name=\"No\"\r\n                            rules={[{ required: true, message: 'Please input equipment No!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            wrapperCol={{ offset: 8, span: 16 }}\r\n                        >\r\n                            <Button type=\"primary\" danger htmlType=\"submit\"\r\n                                loading={inEquipmentHourlyRateDelete}>Delete</Button>\r\n                        </Form.Item>\r\n\r\n                   </Form>\r\n                </Panel>\r\n            </Collapse>\r\n\r\n    </Fragment>);\r\n\r\n    async function ProjectSubmitAsync(values: any) {\r\n        setInProjectSubmit(true);\r\n        try {\r\n            const projectsWebAPI = new ProjectsWebAPI();\r\n            const project: Project = Object.assign(new Project(), values);\r\n            const projects = ProjectsRepository.Instance.Projects;\r\n            if (!projects.some(item => item.No === project.No)) {\r\n                await projectsWebAPI.PostAsync(project);\r\n                window.alert(\"Add project successfully!\");\r\n            } else {\r\n                await projectsWebAPI.PutAsync(project);\r\n                window.alert(\"Update project successfully!\");\r\n            }\r\n        } finally { \r\n            await ProjectsRepository.Instance.LoadAsync();\r\n            setInProjectSubmit(false); \r\n        }\r\n    }\r\n\r\n    async function ProjectDeleteAsync(values:any){\r\n        setInProjectDelete(true);\r\n        try {\r\n            const projectsWebAPI = new ProjectsWebAPI();\r\n            await projectsWebAPI.DeleteByNameAsync(values.Name);\r\n            window.alert(\"Delete project successfully!\");\r\n        } catch (error) { window.alert(error) }\r\n        finally { \r\n            await ProjectsRepository.Instance.LoadAsync();\r\n            setInProjectDelete(false); \r\n        }\r\n    }\r\n\r\n    async function OnEquipmentHourlyRateSubmitAsync(values:any)\r\n    {\r\n        setInEquipmentHourlyRateSubmit(true);\r\n        try {\r\n            const equipmentHourlyRatesWebAPI = new EquipmentHourlysRatesWebAPI();\r\n            const equipmentHourlyRate: EquipmentHourlyRate =\r\n                Object.assign(new EquipmentHourlyRate(), values);\r\n            const equipmentHourlyRates = EquipmentHourlyRatesRepository.Instance.EquipmentHourlyRates;\r\n            if (!equipmentHourlyRates.some(item => item.EquipmentNo === equipmentHourlyRate.EquipmentNo)) {\r\n                await equipmentHourlyRatesWebAPI.PostAsync(equipmentHourlyRate);\r\n                window.alert(\"Add equipment no hourly rate successfully!\");\r\n            } else {\r\n                await equipmentHourlyRatesWebAPI.PutAsync(equipmentHourlyRate);\r\n                window.alert(\"Update equipment no hourly rate successfully!\");\r\n            }\r\n        } finally {\r\n            await EquipmentHourlyRatesRepository.Instance.LoadAsync();\r\n            setInEquipmentHourlyRateSubmit(false);\r\n        }\r\n    }\r\n\r\n    async function OnEquipmentHourlyRateDeleteAsync(values:any)\r\n    {\r\n        setInEquipmentHourlyRateDelete(true);\r\n        try {\r\n            const equipmentHourlyRatesWebAPI = new EquipmentHourlysRatesWebAPI();\r\n            const res = await equipmentHourlyRatesWebAPI.DeleteByNoAsync(values.No);\r\n            window.alert(\"Delete equipment no hourly rate successfully!\");\r\n        } catch (error) { window.alert(error) }\r\n        finally {\r\n            await EquipmentHourlyRatesRepository.Instance.LoadAsync();\r\n            setInEquipmentHourlyRateDelete(false);\r\n        }\r\n    }\r\n}",["135","136"],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\AddMachineDownRecord.tsx",["137"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Form, Input, Select, Button } from 'antd';\r\nimport EquipmentHourlyRatesRepository from '../Repositories/EquipmentHourlyRatesRepository';\r\nimport MachineDownRecord from '../Models/MachineDownRecord';\r\nimport TimeStampStringConverter from '../Services/TimeStampConverter';\r\nimport MachineDownRecordsWebAPI from '../WebAPIs/MachineDownRecordsWebAPI';\r\nimport moment from 'moment';\r\nimport UsersRepository from '../Repositories/UsersRepository';\r\n\r\nconst { Option } = Select;\r\nconst _timeStampConverter = new TimeStampStringConverter();\r\nconst _equipmentHourlyRatesRepo = EquipmentHourlyRatesRepository.Instance;\r\nconst _usersRepo = UsersRepository.Instance;\r\nconst _machineDownRecordsWebAPI = new MachineDownRecordsWebAPI();\r\nexport default function AddMachineDownRecord()\r\n{\r\n    const [form] = Form.useForm();\r\n    const [submitButtonLoading, setSubmitButtonLoading] = useState<boolean>(false);\r\n    useEffect(() =>\r\n    {\r\n        form.setFieldsValue({\r\n            MachineDownDateString: _timeStampConverter.FromUnixTimeSeconds(moment().unix())\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form\r\n                form={form}\r\n                style = {{marginTop:'2rem'}}\r\n                labelCol={{ span: '8' }}\r\n                wrapperCol={{ span: '12' }}\r\n                layout=\"horizontal\">\r\n                <Form.Item\r\n                    name=\"UserId\"\r\n                    label=\"User Id\"\r\n                    rules={[{ \r\n                        required: true,\r\n                        validator: (_, value: string) => _usersRepo.ContainsId(value) ? Promise.resolve() : Promise.reject(\"User Id is invalid.\"),\r\n                    }]}\r\n                >\r\n                    <Select showSearch\r\n                        onSearch = {value=>form.setFieldsValue({UserId:value})}>\r\n                        {\r\n                            _usersRepo.Users.map(item=>\r\n                                <Option value={item.UserId!} key={item.UserId!}>{item.UserId}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"EquipmentNo\"\r\n                    label=\"Equipment No\"\r\n                    rules={[{\r\n                        required: true,\r\n                        validator: (_, value: string) => _equipmentHourlyRatesRepo.ContainsNo(value) ? Promise.resolve() : Promise.reject(\"Equipment no is invalid.\"),\r\n                        message: \"Equipment no is invalid.\"\r\n                    }]}\r\n                >\r\n                    <Select showSearch\r\n                        onSearch={value => form.setFieldsValue({ EquipmentNo: value })}>\r\n                        {\r\n                            _equipmentHourlyRatesRepo.EquipmentHourlyRates\r\n                                .map(item => (\r\n                                    <Option value={item.EquipmentNo!} key={item.EquipmentNo!}>{item.EquipmentNo}</Option>\r\n                                ))\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    name=\"MachineDownDateString\"\r\n                    label=\"Machine Down Date\"\r\n                    rules={[{ required: true, pattern: /^\\d{4}\\/\\d{1,2}\\/\\d{1,2}\\s\\d{1,2}:\\d{1,2}$/, message: 'Time format does not match yyyy/MM/dd HH:mm' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"Comment\"\r\n                    label=\"Comment\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" onClick={SubmitAsync}\r\n                        loading={submitButtonLoading}\r\n                        style={{ marginRight: \"4px\" }}>\r\n                        Submit\r\n                    </Button>\r\n                    <Button danger type=\"primary\" onClick={ResetForm}>\r\n                        Clear\r\n               </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n\r\n    async function SubmitAsync()\r\n    {\r\n        setSubmitButtonLoading(true);\r\n        try\r\n        {\r\n            const values = await form.validateFields();\r\n            const machineDownRecord: MachineDownRecord = Object.assign(new MachineDownRecord(), values);\r\n            machineDownRecord.MachineDownDate = _timeStampConverter.ToUnixTimeSeconds(values.MachineDownDateString)\r\n            await _machineDownRecordsWebAPI.PostAsync(machineDownRecord);\r\n            window.alert('Machine Down Record Added Successfully, Check confirmed email later!')\r\n        }catch(err)\r\n        {\r\n            window.alert(err);\r\n        } \r\n        finally\r\n        {\r\n            setSubmitButtonLoading(false);\r\n        }\r\n    }\r\n\r\n    function ResetForm()\r\n    {\r\n        if (window.confirm('Confirm to clear all the fields?'))\r\n        {\r\n            form.resetFields();\r\n            form.setFieldsValue({\r\n                MachineDownDateString: _timeStampConverter.FromUnixTimeSeconds(moment().unix())\r\n            });\r\n        }\r\n    }\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Pages\\MachineDownRecords.tsx",["138","139","140"],"import React,{Fragment, useEffect, useState} from 'react';\r\nimport { Table,Modal, Button} from 'antd';\r\nimport TimeStampStringConverter from \"../Services/TimeStampConverter\";\r\nimport MachineDownRecordsWebAPI from \"../WebAPIs/MachineDownRecordsWebAPI\";\r\nimport UsageRecordsWebAPI from \"../WebAPIs/UsageRecordsWebAPI\";\r\nimport MachineDownRecord from '../Models/MachineDownRecord';\r\nimport moment from 'moment';\r\nconst distinct = require('distinct');\r\nconst {Column} = Table;\r\nconst _pageSize = 20;\r\n\r\nexport default function MachineDownRecords()\r\n{\r\n    const _machineDownRecordsWebAPI =new MachineDownRecordsWebAPI();\r\n    const _timeStampStringConverter = new TimeStampStringConverter();\r\n    const [tableLoading,setTableLoading]=useState<boolean>(true);\r\n    const [currentPageIndex,setCurrentPageIndex]=useState<number>(1);\r\n    const [machineDownRecords,setMachineDownRecords]= useState<MachineDownRecord[]>([]);\r\n\r\n    const [updatable,setUpdatable] = useState<boolean>(false);\r\n    const [resetable,setResetable] = useState<boolean>(false);\r\n    const [inEditing,setInEditing]=useState<boolean>(false);\r\n    const [selectedRecord,setSelectedRecord]=useState<MachineDownRecord|null>(null);\r\n\r\n    useEffect(()=>{\r\n        FetchMachineDownRecords()},[]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"HeaderBar\">HJL-NL-TI-V Machine down record {moment().year()}</div>\r\n            <Table dataSource={machineDownRecords}\r\n                loading={tableLoading}\r\n                rowKey=\"Id\"\r\n                pagination={{position:[\"bottomCenter\"],defaultPageSize:_pageSize,current:currentPageIndex,\r\n                            onChange:index=>setCurrentPageIndex(index)}}\r\n                rowSelection={{\r\n                    type:\"radio\",\r\n                    hideSelectAll:true,\r\n                    onSelect:OnSelect\r\n                    }}\r\n                bordered \r\n                size='small'>\r\n                <Column title=\"User Id\" dataIndex=\"UserId\"\r\n                    filters={GenerateFilterOptions(machineDownRecords.filter(item=>item.UserId?true:false).map(item=>item.UserId!))}\r\n                    onFilter={(value, record) => (record as MachineDownRecord).UserId === value }/>\r\n                <Column title=\"Equipment No\" dataIndex=\"EquipmentNo\"\r\n                    filters={GenerateFilterOptions(machineDownRecords.filter(item=>item.EquipmentNo?true:false).map(item=>item.EquipmentNo!))}\r\n                    onFilter={(value, record) => (record as MachineDownRecord).EquipmentNo === value }/>\r\n                <Column title=\"Down\" dataIndex=\"MachineDownDate\" \r\n                    render={timeStampValue=>timeStampValue?_timeStampStringConverter.FromUnixTimeSeconds(timeStampValue as number):null}/>\r\n                <Column title=\"Repaired\" dataIndex=\"MachineRepairedDate\" \r\n                    render={timeStampValue=>timeStampValue?_timeStampStringConverter.FromUnixTimeSeconds(timeStampValue as number):null}/>\r\n                <Column title=\"Comment\" dataIndex=\"Comment\" />\r\n                <Column title=\"Duration\" \r\n                    render={(_,record)=>record?GetAndRenderDuration(record as MachineDownRecord):null}/>\r\n            </Table>\r\n\r\n            <Button type='primary' disabled={!updatable} loading={inEditing}\r\n                onClick={ConfirmRepairedDateAsync}>Update</Button>\r\n            <Button type=\"primary\" danger disabled={!resetable} loading={inEditing}\r\n                onClick={CancelRepairedDateAsync} style={{marginLeft:'4px'}}>\r\n                Reset\r\n            </Button>\r\n        </Fragment>\r\n    );\r\n\r\n    function OnSelect(record:MachineDownRecord)\r\n    {\r\n        setSelectedRecord(record);\r\n        if(record.MachineRepairedDate)\r\n        {\r\n            setResetable(true);\r\n            setUpdatable(false);\r\n        }else{\r\n            setUpdatable(true);\r\n            setResetable(false);\r\n        }\r\n    }\r\n\r\n    async function FetchMachineDownRecords()\r\n    {\r\n        const machineDownRecords = await _machineDownRecordsWebAPI.GetAsync();\r\n        setMachineDownRecords([...machineDownRecords]);\r\n        setCurrentPageIndex(GetPageCount(machineDownRecords.length,_pageSize));\r\n        setTableLoading(false);\r\n    }\r\n\r\n    async function ConfirmRepairedDateAsync()\r\n    {\r\n        setInEditing(true);\r\n        try {\r\n            const repairedDateString = window.prompt(`Input Equipment ${selectedRecord?.EquipmentNo} repaired date in yyyy/MM/dd HH:mm format:`,\r\n                moment().format('yyyy/MM/DD HH:mm'));\r\n            if (repairedDateString) {\r\n                const repairedDate = _timeStampStringConverter.ToUnixTimeSeconds(repairedDateString);\r\n                if(repairedDate > selectedRecord!.MachineDownDate)\r\n                {   \r\n                    const index = machineDownRecords.findIndex(record=>record.Id===selectedRecord!.Id) ;\r\n                    machineDownRecords[index].MachineRepairedDate = repairedDate;\r\n                    await _machineDownRecordsWebAPI.PutAsync(machineDownRecords[index]);\r\n                    setMachineDownRecords([...machineDownRecords]);\r\n                    setSelectedRecord(null);\r\n                    setUpdatable(false);\r\n                    setResetable(false);\r\n                }else{\r\n                    throw new Error('Error: Input Repaired date is early than down date!');\r\n                }\r\n            }\r\n        }catch(error)\r\n        {\r\n            window.alert(error);\r\n        }\r\n        finally { setInEditing(false); }\r\n    }\r\n\r\n    async function CancelRepairedDateAsync()\r\n    {\r\n        setInEditing(true);\r\n        try {\r\n            if(window.confirm(`Sure to set Equipment ${selectedRecord?.EquipmentNo} as not repaired yet?`))\r\n            {\r\n                const index = machineDownRecords.findIndex(record=>record.Id===selectedRecord!.Id);\r\n                machineDownRecords[index].MachineRepairedDate = null;\r\n                await _machineDownRecordsWebAPI.PutAsync(machineDownRecords[index]);\r\n                setMachineDownRecords([...machineDownRecords]);\r\n                setSelectedRecord(null);\r\n                setUpdatable(false);\r\n                setResetable(false);\r\n            }\r\n        }catch(error)\r\n        {\r\n            window.alert(error);\r\n        }\r\n        finally { setInEditing(false); }\r\n    }\r\n}\r\n\r\nfunction GetPageCount(num: number, pageSize: number)\r\n{\r\n    return num % pageSize === 0 ? Math.floor(num / pageSize) : Math.ceil(num / pageSize);\r\n}\r\n\r\nfunction GetAndRenderDuration(record: MachineDownRecord)\r\n{\r\n    const duration = MachineDownRecord.GetDuration(record);\r\n    if(duration){\r\n    return Number.isInteger(duration) ? duration : duration.toFixed(2);\r\n    }else{return \"\"}\r\n}\r\n\r\nfunction GenerateFilterOptions<TOption>(optionValues: TOption[])\r\n{\r\n    return (distinct(optionValues) as TOption[]).sort().map(optionValue => { return { text: optionValue, value: optionValue } });\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\UsageRecordsWebAPI.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\DynamicQueryWebAPI.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\UsageRecordLocalCacheService.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\TableGenerator.ts",["141"],"import {ColumnProps} from 'antd/lib/table/Column';\r\n\r\nexport default class TableGenerator\r\n{\r\n    public GenerateColumns<TItem>(item:TItem)\r\n    {\r\n        const columns:ColumnProps<TItem>[] =[];\r\n        for (const key in item) {\r\n            if (Object.prototype.hasOwnProperty.call(item, key)) {\r\n                const element = item[key];\r\n                const columnType:ColumnProps<TItem> = \r\n                {\r\n                    title : key,\r\n                    dataIndex :key,\r\n                }\r\n                columns.push(columnType);\r\n            }\r\n        }\r\n        return columns;\r\n    }\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Services\\TimeStampConverter.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\UsageRecord.ts",["142","143"],"import EquipmentHourlyRate from \"./EquipmentHourlyRate\";\r\nimport Project from \"./Project\";\r\n\r\nexport default class UsageRecord\r\n{\r\n    public Id:number = 0;\r\n    public User:string | null = null;\r\n    public TestNo : string | null = null;\r\n    public EquipmentNo :  string | null = null;\r\n    //public EquipmentHourlyRate:EquipmentHourlyRate |null=null;\r\n    public TestType:string | null = null;\r\n    public ProjectNo:string | null = null;\r\n    //public Project:Project | null = null;\r\n    public StartTime : number = 0;\r\n    public EndTime : number =0;\r\n\r\n    public static GetDuration(usageRecord:UsageRecord)\r\n    {\r\n        if(usageRecord.StartTime!=null && usageRecord.EndTime!=null){\r\n            return (usageRecord.EndTime - usageRecord.StartTime)/3600\r\n        }else{\r\n            throw new Error(`${usageRecord.TestNo} with wrong Timestamp format`);\r\n        }\r\n    }\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\EquipmentHourlyRate.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\Project.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\MachineDownRecordsWebAPI.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Components\\UsageRecordEditor.tsx",["144"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Select, Button } from 'antd';\r\nimport UsageRecord from '../Models/UsageRecord';\r\nimport moment from 'moment';\r\nimport TimeStampStringConverter from '../Services/TimeStampConverter';\r\nimport ProjectsRepository from '../Repositories/ProjectsRepository';\r\nimport EquipmentHourlyRatesRepository from '../Repositories/EquipmentHourlyRatesRepository';\r\n\r\nconst { Option } = Select;\r\nconst _timeStampConverter = new TimeStampStringConverter();\r\nconst _projectsRepo = ProjectsRepository.Instance;\r\nconst _equipmentHourlyRatesRepo = EquipmentHourlyRatesRepository.Instance;\r\n\r\n\r\nconst UsageRecordEditor: React.FC<{\r\n    Record?: UsageRecord,\r\n    OnSubmit? : (record:UsageRecord) => Promise<void>\r\n    OnCancel?:()=>Promise<void>\r\n}> = ({ Record,OnSubmit,OnCancel }) =>\r\n    {\r\n        const [form] = Form.useForm();\r\n        const [submitButtonLoading,setSubmitButtonLoading]=useState<boolean>(false);\r\n\r\n        \r\n        useEffect(()=>{\r\n            if(Record)\r\n            {\r\n                form.setFieldsValue(Record);\r\n                form.setFieldsValue({\r\n                    ProjectName:_projectsRepo.FindNameByProjectNo(Record.ProjectNo!),\r\n                    StartTimeString:_timeStampConverter.FromUnixTimeSeconds(Record.StartTime!),\r\n                    EndTimeString:_timeStampConverter.FromUnixTimeSeconds(Record.EndTime!)\r\n                });\r\n            }else{\r\n                form.setFieldsValue({\r\n                    StartTimeString:_timeStampConverter.FromUnixTimeSeconds(moment().unix()),\r\n                    EndTimeString:_timeStampConverter.FromUnixTimeSeconds(moment().unix())\r\n                });\r\n            }\r\n        },[Record]);\r\n\r\n        return (\r\n            <Form\r\n                form={form}\r\n                labelCol={{ span: '8' }}\r\n                wrapperCol={{ span: '16' }}\r\n                layout=\"horizontal\"\r\n                initialValues={Record ?? undefined}\r\n            >\r\n                <Form.Item\r\n                    name=\"User\"\r\n                    label=\"User\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"TestNo\"\r\n                    label=\"Test No\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"EquipmentNo\"\r\n                    label=\"Equipment No\"\r\n                    rules={[{\r\n                        required: true,\r\n                        validator: (_, value: string) => _equipmentHourlyRatesRepo.ContainsNo(value) ? Promise.resolve() : Promise.reject(\"Equipment no is invalid.\"),\r\n                        message: \"Equipment no is invalid.\"\r\n                    }]}\r\n                >\r\n                    <Select showSearch\r\n                        onSearch={value => form.setFieldsValue({ EquipmentNo: value })}>\r\n                        {\r\n                            _equipmentHourlyRatesRepo.EquipmentHourlyRates.map(item=>item.EquipmentNo).sort()\r\n                                .map(item=>(\r\n                                    <Option value={item!} key={item!}>{item}</Option>\r\n                                ))\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"TestType\"\r\n                    label=\"Test Type\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"ProjectName\"\r\n                    label=\"Project Name\"\r\n                    rules={[{\r\n                        required: true,\r\n                        validator: (_, value: string) => _projectsRepo.ContainsName(value) ? Promise.resolve() : Promise.reject(\"Project name is invalid.\"),\r\n                        message: \"Project name is invalid.\"\r\n                    }]}\r\n                >\r\n                    <Select showSearch\r\n                        onSelect={OnProjectNameSelected}>\r\n                        {\r\n                            _projectsRepo.Projects.map(item=>item.Name).sort().map( item=>(\r\n                                <Option value={item!} key={item!}>{item}</Option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"ProjectNo\"\r\n                    label=\"Project No\"\r\n                    rules={[{\r\n                        required: true,\r\n                        validator: (_, value: string) => _projectsRepo.ContainsNo(value) ? Promise.resolve() : Promise.reject(\"Project name is invalid.\"),\r\n                        message: \"Project no is invalid.\"\r\n                    }]}\r\n                    >\r\n                    <Select showSearch\r\n                        onSelect={OnProjectNoSelected}>\r\n                        {\r\n                            _projectsRepo.Projects.map(item=>item.No).sort().map( item=>(\r\n                                <Option value={item!} key={item!}>{item}</Option>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </Form.Item>             \r\n\r\n                <Form.Item\r\n                    name=\"StartTimeString\"\r\n                    label=\"Start Time\"\r\n                    rules={[{ required: true, pattern: /^\\d{4}\\/\\d{1,2}\\/\\d{1,2}\\s\\d{1,2}:\\d{1,2}$/, message: 'Time format does not match yyyy/MM/dd HH:mm' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"EndTimeString\"\r\n                    label=\"End Time\"\r\n                    rules={[{ required: true, pattern: /^\\d{4}\\/\\d{1,2}\\/\\d{1,2}\\s\\d{1,2}:\\d{1,2}$/, message: 'Time format does not match yyyy/MM/dd HH:mm' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{offset: 8, span: 16}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" onClick={SubmitAsync}\r\n                        loading={submitButtonLoading}\r\n                        style={{marginRight:\"4px\"}}>\r\n                        Submit\r\n                    </Button>\r\n                    <Button danger type=\"primary\" onClick={ResetForm}>\r\n                        Clear\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n\r\n        async function SubmitAsync ()\r\n        {\r\n            setSubmitButtonLoading(true);\r\n            try\r\n            {\r\n                const values = await form.validateFields();\r\n                const usageRecord: UsageRecord = Object.assign(new UsageRecord(), values);\r\n                const projecrtNo = _projectsRepo.FindProjectNoByName(values.ProjectName);\r\n                if(!projecrtNo)\r\n                {\r\n                    window.alert(\"Has problem with project no!\");\r\n                    return;\r\n                } \r\n                usageRecord.ProjectNo = projecrtNo\r\n                usageRecord.StartTime = _timeStampConverter.ToUnixTimeSeconds(values.StartTimeString);\r\n                usageRecord.EndTime = _timeStampConverter.ToUnixTimeSeconds(values.EndTimeString);\r\n\r\n                for (const key in usageRecord) {\r\n                    if(key === \"Id\"){continue;}\r\n                    if (Object.prototype.hasOwnProperty.call(usageRecord, key)) {\r\n                        const wrap:any = usageRecord;\r\n                        if(!wrap[key]){\r\n                            if(key!==\"EquipmentHourlyRate\" && key!==\"Project\"){\r\n                                window.alert(`${key} property with no value!`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                await OnSubmit?.(usageRecord);\r\n            }finally{\r\n                setSubmitButtonLoading(false);\r\n            }\r\n        };\r\n\r\n        function OnProjectNameSelected(value:string)\r\n        {\r\n            const projectNo = _projectsRepo.FindProjectNoByName(value);\r\n            form.setFieldsValue({\r\n                ProjectNo:projectNo,\r\n                ProjectName:value\r\n            });\r\n        }\r\n\r\n        function OnProjectNoSelected(value:string)\r\n        {\r\n            const projectName = _projectsRepo.FindNameByProjectNo(value);\r\n            form.setFieldsValue({\r\n                ProjectNo: value,\r\n                ProjectName: projectName\r\n            });\r\n        }\r\n\r\n        function ResetForm()\r\n        {\r\n            if( window.confirm('Confirm to clear all the fields?'))\r\n            {\r\n                form.setFieldsValue(new UsageRecord());\r\n                OnCancel?.();\r\n            }\r\n        }\r\n    }\r\n\r\n    export default UsageRecordEditor;","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Models\\MachineDownRecord.ts",[],"C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\Repositories\\UsersRepository.ts",["145"],"import User from \"../Models/User\";\r\nimport MachineDownRecordsWebAPI from \"../WebAPIs/MachineDownRecordsWebAPI\";\r\nimport UsersWebAPI from \"../WebAPIs/UsersWebAPI\";\r\n\r\n\r\nexport default class UsersRepository\r\n{\r\n    private static _instance:UsersRepository = new UsersRepository();\r\n    private constructor(){}\r\n    public static get Instance(){ return this._instance;}\r\n\r\n    public async LoadAsync()\r\n    {\r\n        const webAPI = new UsersWebAPI();\r\n        this._users =await webAPI.GetAsync();\r\n    }\r\n    private _users:User[] = [];\r\n    public get Users(){return this._users;}\r\n\r\n    public ContainsId(userId:string)\r\n    {\r\n        return this._users.some(item=>item.UserId===userId);\r\n    }\r\n}","C:\\Users\\liha52\\Desktop\\pgsqlusagerecord\\labcmsusagerecordclient\\src\\WebAPIs\\UsersWebAPI.ts",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":23},{"ruleId":"150","severity":1,"message":"154","line":1,"column":25,"nodeType":"152","messageId":"153","endLine":1,"endColumn":33},{"ruleId":"150","severity":1,"message":"155","line":7,"column":5,"nodeType":"152","messageId":"153","endLine":7,"endColumn":18},{"ruleId":"150","severity":1,"message":"156","line":7,"column":44,"nodeType":"152","messageId":"153","endLine":7,"endColumn":58},{"ruleId":"150","severity":1,"message":"157","line":7,"column":60,"nodeType":"152","messageId":"153","endLine":7,"endColumn":76},{"ruleId":"150","severity":1,"message":"158","line":13,"column":8,"nodeType":"152","messageId":"153","endLine":13,"endColumn":13},{"ruleId":"150","severity":1,"message":"159","line":6,"column":14,"nodeType":"152","messageId":"153","endLine":6,"endColumn":23},{"ruleId":"160","severity":1,"message":"161","line":30,"column":7,"nodeType":"162","endLine":30,"endColumn":9,"suggestions":"163"},{"ruleId":"150","severity":1,"message":"164","line":1,"column":27,"nodeType":"152","messageId":"153","endLine":1,"endColumn":36},{"ruleId":"150","severity":1,"message":"165","line":2,"column":31,"nodeType":"152","messageId":"153","endLine":2,"endColumn":41},{"ruleId":"150","severity":1,"message":"166","line":210,"column":19,"nodeType":"152","messageId":"153","endLine":210,"endColumn":22},{"ruleId":"146","replacedBy":"167"},{"ruleId":"148","replacedBy":"168"},{"ruleId":"160","severity":1,"message":"169","line":24,"column":8,"nodeType":"162","endLine":24,"endColumn":10,"suggestions":"170"},{"ruleId":"150","severity":1,"message":"171","line":2,"column":16,"nodeType":"152","messageId":"153","endLine":2,"endColumn":21},{"ruleId":"150","severity":1,"message":"172","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":26},{"ruleId":"160","severity":1,"message":"173","line":26,"column":36,"nodeType":"162","endLine":26,"endColumn":38,"suggestions":"174"},{"ruleId":"150","severity":1,"message":"175","line":10,"column":23,"nodeType":"152","messageId":"153","endLine":10,"endColumn":30},{"ruleId":"150","severity":1,"message":"176","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":27},{"ruleId":"150","severity":1,"message":"177","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":15},{"ruleId":"160","severity":1,"message":"169","line":40,"column":11,"nodeType":"162","endLine":40,"endColumn":19,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"179","line":2,"column":8,"nodeType":"152","messageId":"153","endLine":2,"endColumn":32},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'LoginOutlined' is defined but never used.","'DatabaseFilled' is defined but never used.","'BarChartOutlined' is defined but never used.","'Admin' is defined but never used.","'Paragraph' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'FetchUsageRecords'. Either include it or remove the dependency array.","ArrayExpression",["182"],"'useEffect' is defined but never used.","'Typography' is defined but never used.","'res' is assigned a value but never used.",["180"],["181"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["183"],"'Modal' is defined but never used.","'UsageRecordsWebAPI' is defined but never used.","React Hook useEffect has a missing dependency: 'FetchMachineDownRecords'. Either include it or remove the dependency array.",["184"],"'element' is assigned a value but never used.","'EquipmentHourlyRate' is defined but never used.","'Project' is defined but never used.",["185"],"'MachineDownRecordsWebAPI' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [FetchUsageRecords]",{"range":"194","text":"195"},"Update the dependencies array to be: [form]",{"range":"196","text":"197"},"Update the dependencies array to be: [FetchMachineDownRecords]",{"range":"198","text":"199"},"Update the dependencies array to be: [Record, form]",{"range":"200","text":"201"},[1247,1249],"[FetchUsageRecords]",[1139,1141],"[form]",[1253,1255],"[FetchMachineDownRecords]",[1720,1728],"[Record, form]"]